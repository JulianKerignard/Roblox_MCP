-- Script serveur pour g√©rer la boutique (version simplifi√©e pour Studio)
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

-- Modules
local ShopSystem = require(ReplicatedStorage.Shared.ShopSystem)

-- Variables
local playerData = {}
local remotes = ShopSystem.SetupRemotes()

-- Structure des donn√©es du joueur
local function getDefaultPlayerData()
    return {
        gems = 100, -- Donner des gemmes de d√©part pour tester
        ownedItems = {},
        equippedItems = {
            trail = nil,
            boost = nil,
            ability = nil,
            cosmetic = nil
        }
    }
end

-- Charger les donn√©es du joueur
local function loadPlayerData(player)
    playerData[player] = getDefaultPlayerData()
    
    -- Cr√©er ou r√©cup√©rer les leaderstats
    local leaderstats = player:FindFirstChild("leaderstats")
    if not leaderstats then
        leaderstats = Instance.new("Folder")
        leaderstats.Name = "leaderstats"
        leaderstats.Parent = player
    end
    
    local gems = Instance.new("IntValue")
    gems.Name = "Gems"
    gems.Value = playerData[player].gems
    gems.Parent = leaderstats
    
    print("Donn√©es du joueur charg√©es pour", player.Name)
end

-- Fonction pour acheter un item
remotes.PurchaseItem.OnServerInvoke = function(player, itemId)
    local data = playerData[player]
    if not data then return false, "Donn√©es non charg√©es" end
    
    local item = ShopSystem.GetItemById(itemId)
    if not item then return false, "Item invalide" end
    
    -- V√©rifier si le joueur poss√®de d√©j√† l'item
    if table.find(data.ownedItems, itemId) then
        return false, "Vous poss√©dez d√©j√† cet item"
    end
    
    -- V√©rifier si le joueur a assez de gemmes
    if data.gems < item.price then
        return false, "Pas assez de gemmes"
    end
    
    -- Effectuer l'achat
    data.gems = data.gems - item.price
    table.insert(data.ownedItems, itemId)
    
    -- Mettre √† jour l'affichage des gemmes
    player.leaderstats.Gems.Value = data.gems
    
    print(player.Name, "a achet√©", item.name)
    
    return true, "Achat r√©ussi"
end

-- Fonction pour obtenir les items poss√©d√©s
remotes.GetOwnedItems.OnServerInvoke = function(player)
    local data = playerData[player]
    if not data then return {} end
    return data.ownedItems, data.equippedItems
end

-- Fonction pour √©quiper/d√©s√©quiper un item
remotes.EquipItem.OnServerEvent:Connect(function(player, itemId, equip)
    local data = playerData[player]
    if not data then return end
    
    -- V√©rifier si le joueur poss√®de l'item
    if not table.find(data.ownedItems, itemId) then return end
    
    local item = ShopSystem.GetItemById(itemId)
    if not item then return end
    
    -- D√©terminer la cat√©gorie pour l'√©quipement
    local categorySlot = nil
    if item.category == ShopSystem.Categories.TRAILS then
        categorySlot = "trail"
    elseif item.category == ShopSystem.Categories.BOOSTS then
        categorySlot = "boost"
    elseif item.category == ShopSystem.Categories.ABILITIES then
        categorySlot = "ability"
    elseif item.category == ShopSystem.Categories.COSMETICS then
        categorySlot = "cosmetic"
    end
    
    if categorySlot then
        if equip then
            data.equippedItems[categorySlot] = itemId
            print(player.Name, "a √©quip√©", item.name)
        else
            data.equippedItems[categorySlot] = nil
            print(player.Name, "a d√©s√©quip√©", item.name)
        end
        
        -- Appliquer les effets de l'item
        applyItemEffects(player, item, equip)
    end
end)

-- Appliquer les effets d'un item
local function applyItemEffects(player, item, equip)
    local character = player.Character
    if not character then return end
    
    if item.category == ShopSystem.Categories.BOOSTS then
        local humanoid = character:FindFirstChild("Humanoid")
        if humanoid then
            if item.id == "boost_speed" and equip then
                humanoid.WalkSpeed = 16 * (item.data.speedMultiplier or 1)
            elseif item.id == "boost_speed" and not equip then
                humanoid.WalkSpeed = 16
            elseif item.id == "boost_jump" and equip then
                humanoid.JumpPower = 50 * (item.data.jumpMultiplier or 1)
            elseif item.id == "boost_jump" and not equip then
                humanoid.JumpPower = 50
            end
        end
    end
end

-- Quand un joueur rejoint
Players.PlayerAdded:Connect(function(player)
    loadPlayerData(player)
    
    -- R√©appliquer les items √©quip√©s quand le personnage spawn
    player.CharacterAdded:Connect(function(character)
        task.wait(1) -- Attendre que le personnage soit compl√®tement charg√©
        local data = playerData[player]
        if data and data.equippedItems then
            for categorySlot, itemId in pairs(data.equippedItems) do
                if itemId then
                    local item = ShopSystem.GetItemById(itemId)
                    if item then
                        applyItemEffects(player, item, true)
                    end
                end
            end
        end
    end)
end)

-- Quand un joueur quitte
Players.PlayerRemoving:Connect(function(player)
    playerData[player] = nil
end)

-- Donner des gemmes p√©riodiquement pour tester
task.spawn(function()
    while true do
        task.wait(10)
        for player, data in pairs(playerData) do
            if player.Parent then -- V√©rifier que le joueur est toujours connect√©
                data.gems = data.gems + 10
                player.leaderstats.Gems.Value = data.gems
            end
        end
    end
end)

print("üõçÔ∏è Syst√®me de boutique initialis√© (mode Studio)")